/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package squaredetection;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author Phani
 */
public class Frame extends javax.swing.JFrame {

    /**
     * Creates new form Frame
     */
    private Thread t = null;
    private static final int WHITE_RGB = Color.white.getRGB();
    private int threshold = 200;
    private int minPoints = 500;
    LinkedList<Blob> blobsTmp;
    LinkedList<Point> pointsTmp;
    int fillL, fillR;

    public Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        thresholdField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        minPointsField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Threshold: ");

        thresholdField.setText("200");
        thresholdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thresholdFieldActionPerformed(evt);
            }
        });

        output.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jScrollPane1.setViewportView(output);

        jLabel2.setText("Min Points:");

        minPointsField.setText("500");
        minPointsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minPointsFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(thresholdField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minPointsField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 269, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(thresholdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(minPointsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void thresholdFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thresholdFieldActionPerformed
        threshold = Integer.parseInt(thresholdField.getText());
    }//GEN-LAST:event_thresholdFieldActionPerformed

    private void minPointsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minPointsFieldActionPerformed
        minPoints = Integer.parseInt(minPointsField.getText());
    }//GEN-LAST:event_minPointsFieldActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField minPointsField;
    private javax.swing.JLabel output;
    private javax.swing.JTextField thresholdField;
    // End of variables declaration//GEN-END:variables
    BufferedImage workingImage;
    BufferedImage originalImage;
    BufferedImage outputImage;
    Graphics2D g;
    Object[] blobs;
    Color mask = new Color(0, 0, 0, 210);
    long lastTime = 0;

    public void runProgram() {
        try {
            //workingImage = ImageIO.read(new File("C:/Users/Phani/Desktop/2.jpg"));
            workingImage = ImageIO.read(new URL("http://10.6.62.11/axis-cgi/jpg/image.cgi?resolution=320x240"));
            originalImage = new BufferedImage(workingImage.getWidth(), workingImage.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
            originalImage.createGraphics().drawImage(workingImage, 0, 0, null);
            outputImage = new BufferedImage(workingImage.getWidth(), workingImage.getHeight(), BufferedImage.TYPE_INT_ARGB);
            g = outputImage.createGraphics();
            g.drawImage(workingImage, 0, 0, null);
            g.setColor(mask);
            g.fillRect(0, 0, workingImage.getWidth(), workingImage.getHeight());
            g.setColor(Color.cyan);
            g.drawOval(workingImage.getWidth() / 2 - 3, workingImage.getHeight() / 2 - 3, 6, 6);
            workingImage = new BufferedImage(originalImage.getWidth(), originalImage.getHeight(), BufferedImage.TYPE_INT_RGB);
            workingImage.createGraphics().drawImage(originalImage, 0, 0, null);

            threshold(workingImage, threshold);
            blobs = findBlobs(workingImage);
            for (Object b : blobs) {
                g.setColor(Color.darkGray);
                g.drawPolygon(((Blob) b).getBoundingPolygon());
                g.setColor(Color.blue);
                if (((Blob) b).getAspectRatioScore() + ((Blob) b).getAreaScore() > 100 && ((Blob) b).getAreaScore() < 100 && ((Blob) b).getAspectRatioScore() + ((Blob) b).getAreaScore() < 250) {
                    g.setColor(Color.green);
                }
                g.drawPolygon(((Blob) b).getSimplifiedPolygon());

                g.setColor(Color.red);
                g.drawString("N:" + ((Blob) b).getSimplifiedPolygon().npoints, ((Blob) b).getBoundingPolygon().xpoints[0] + 8, ((Blob) b).getBoundingPolygon().ypoints[0] - 35);
                g.drawString("A:" + ((Blob) b).getAreaScore(), ((Blob) b).getBoundingPolygon().xpoints[0] + 8, ((Blob) b).getBoundingPolygon().ypoints[0] - 25);
                g.drawString("R:" + ((Blob) b).getAspectRatioScore() + "", ((Blob) b).getBoundingPolygon().xpoints[0] + 8, ((Blob) b).getBoundingPolygon().ypoints[0] - 11);
                //g.drawPolygon(((Blob) b).getSimplifiedPolygon());

            }
            g.setColor(Color.white);
            g.drawString("Blobs Found: " + blobs.length, 5, 15);
            g.drawString("FPS: " + (1 / (((double) System.currentTimeMillis() - lastTime) / 1000)), 5, 30);
            output.setIcon(new ImageIcon(outputImage));
            output.repaint();
            lastTime = System.currentTimeMillis();
        } catch (Exception ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private Object[] findBlobs(BufferedImage img) {
        blobsTmp = new LinkedList<>();

        for (int x = 1; x < img.getWidth() - 1; x++) {
            for (int y = 1; y < img.getHeight() - 1; y++) {
                if (isWhite(img, x, y)) {
                    pointsTmp = floodFill(img, x, y, Color.white, Color.green);

                    if (pointsTmp.size() > minPoints) {
                        blobsTmp.add(new Blob(pointsTmp.toArray()));
                    }

                }
            }
        }
        return blobsTmp.toArray();
    }

    private LinkedList<Point> floodFill(BufferedImage img, int x, int y, Color oldColor, Color newColor) {
        LinkedList<Point> points = new LinkedList<>();

        if (img.getRGB(x, y) == oldColor.getRGB()) {
            img.setRGB(x, y, newColor.getRGB());
            points.add(new Point(x, y));
        }

        fillL = x;
        do {
            points.add(new Point(fillL, y));
            img.setRGB(fillL, y, newColor.getRGB());
            fillL--;
        } while (fillL > 1 && img.getRGB(fillL, y) == oldColor.getRGB());
        fillL++;

        fillR = x + 1;
        do {
            points.add(new Point(fillR, y));
            img.setRGB(fillR, y, newColor.getRGB());
            fillR++;
        } while (fillR < img.getWidth() - 1 && img.getRGB(fillR, y) == oldColor.getRGB());
        fillR--;

        for (int i = fillL; i < fillR; i++) {
            if (y > 0 && img.getRGB(i, y - 1) == oldColor.getRGB()) {
                points.addAll(floodFill(img, i, y - 1, oldColor, newColor));
            }
            if (y < img.getHeight() - 1 && img.getRGB(i, y + 1) == oldColor.getRGB()) {
                points.addAll(floodFill(img, i, y + 1, oldColor, newColor));
            }

        }

        return points; // I"M MATT AND I LIIKE CHEEZE
    }

    private void threshold(BufferedImage img, int threshold) {
        for (int x = 0; x < img.getWidth(); x++) {
            for (int y = 0; y < img.getHeight(); y++) {
                if ((img.getRGB(x, y) & 0b11111111) < threshold) {
                    img.setRGB(x, y, 0);
                } else {
                    img.setRGB(x, y, WHITE_RGB);
                }
            }
        }
    }

    private boolean isWhite(BufferedImage img, int x, int y) {
        return (img.getRGB(x, y) & 255) == 255 ? true : false;
    }
}
